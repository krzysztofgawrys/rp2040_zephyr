# Copyright (c) 2022 Mr. Green's Workshop https://www.MrGreensWorkshop.com
# SPDX-License-Identifier: Apache-2.0

# Enable USB stack
CONFIG_USB_DEVICE_STACK=y

# Enable USB Initialize at boot
CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT=y

# USB device descriptors
CONFIG_USB_DEVICE_VID=0x2e8a
CONFIG_USB_DEVICE_PID=0x000a
CONFIG_USB_DEVICE_PRODUCT="Pico"
CONFIG_USB_DEVICE_MANUFACTURER="Raspberry Pi"

# USB configuration descriptors
# To avoid draining the tablet's battery. PicoDRO is designed as a self-powered USB device.
# To do so, D1 is removed from the Raspberry Pi Pico and power is supplied from the VSYS pin.
# That's why, when using the PicoDRO hardware, it should be set as a self-powered USB device.

# Set to "n" for bus-powered devices (powered from the USB host) like the Raspberry Pi Pico.
# Set to "y" for self-powered devices (powered from an external power supply) like PicoDRO hardware.
CONFIG_USB_SELF_POWERED=y

# Depending on your hardware Maximum power consumption needs to be set.
# Set to "125" (250 mA) for the Raspberry Pi Pico (if there is no other external circuitry).
# Set to "1" (2 mA) for the PicoDRO hardware

# Maximum power consumption in 2 mA units
CONFIG_USB_MAX_POWER=250

# Copyright (c) 2022 Mr. Green's Workshop https://www.MrGreensWorkshop.com
# SPDX-License-Identifier: Apache-2.0

# Logging
CONFIG_LOG=y
CONFIG_CONSOLE=y
CONFIG_SERIAL=y
CONFIG_EARLY_CONSOLE=y
CONFIG_UART_CONSOLE=n

# Disable color codes on log output
CONFIG_LOG_BACKEND_SHOW_COLOR=y
CONFIG_LOG_INFO_COLOR_GREEN=y

# Set application log level
# CONFIG_MAIN_LOG_LEVEL_OFF=y   # Off
# CONFIG_MAIN_LOG_LEVEL_ERR=y   # Error
# CONFIG_MAIN_LOG_LEVEL_WRN=y   # Warning
# CONFIG_MAIN_LOG_LEVEL_INF=y   # Info
# CONFIG_MAIN_LOG_LEVEL_DBG=y

#CONFIG_LOG_DEFAULT_LEVEL=3

# Set USB log level
# CONFIG_USB_DRIVER_LOG_LEVEL_ERR=y
# CONFIG_USB_DEVICE_LOG_LEVEL_ERR=y

# Even before the USB serial port is opened at the host, log messages are pushed to the log buffer, then pushed to the USB CDC ACM ring buffer.
# This causes the ring buffer to overflow, and as a result, it adds a new log message saying the "Ring buffer full, drain buffer".
# It creates an endless loop that reproduces the same log message. This causes connection problems, like preventing the port from opening.
# Ring buffer full, drain buffer" log message still exists even if DTR line control is enabled. That's why we set the log level to error.
# Set USB CDC ACM log level
CONFIG_USB_CDC_ACM_LOG_LEVEL_ERR=y

# Enable DTR line control for logging when using USB CDC ACM.
CONFIG_UART_LINE_CTRL=y

# Debugger
CONFIG_DEBUG=y
CONFIG_DEBUG_OPTIMIZATIONS=y

#CONFIG_FLASH=y
#CONFIG_FLASH_PAGE_LAYOUT=y
#CONFIG_FLASH_MAP=y

#CONFIG_SETTINGS=y
#CONFIG_SETTINGS_RUNTIME=y
#CONFIG_NVS=y
#CONFIG_SETTINGS_NVS=y

#CONFIG_FLASH_LOG_LEVEL_DBG=y

CONFIG_SERIAL=y
CONFIG_CONSOLE=y
CONFIG_PRINTK=y
CONFIG_LOG_MODE_IMMEDIATE=n
CONFIG_UART_CONSOLE=y
CONFIG_UART_LINE_CTRL=n

CONFIG_ADC=y
CONFIG_ADC_ASYNC=n
CONFIG_HEAP_MEM_POOL_SIZE=4096

# CONFIG_RING_BUFFER=y
# CONFIG_UART_INTERRUPT_DRIVEN=y

CONFIG_I2C=y
# CONFIG_I2C_RTIO=y
# CONFIG_I2C_LOG_LEVEL_DBG=y
# CONFIG_I2C_INIT_PRIORITY=80

CONFIG_PINCTRL=y
CONFIG_PINCTRL_DYNAMIC=y

CONFIG_RTC=y
CONFIG_RTC_PCF8523=y

CONFIG_SENSOR=y
CONFIG_INA219=y
CONFIG_CBPRINTF_FP_SUPPORT=y